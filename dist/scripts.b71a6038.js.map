{"version":3,"sources":["scripts.js"],"names":["searchText","document","querySelector","searchButton","resultsBlock","addEventListener","e","key","sendAPIcall","console","info","gqlQuery","variables","query","value","endpoint","options","method","headers","body","JSON","stringify","fetch","then","res","json","userData","results","data","search","edges","createCards","catch","err","error","users","forEach","person","displayCard","node","avatarUrl","url","name","login","isHireable","followers","totalCount","starredRepositories","bio","pinnedItems","repo","detailsCard","appendChild","items","description","stargazers"],"mappings":"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","file":"scripts.b71a6038.js","sourceRoot":"..","sourcesContent":["// variables for DOM elements I'll need\r\nconst searchText = document.querySelector('.search');\r\nconst searchButton = document.querySelector('.search-button');\r\nconst resultsBlock = document.querySelector('.results-wrapper');\r\n\r\n// will trigger the API call if user presses enter in input box\r\nsearchText.addEventListener('keypress', (e) => {\r\n  if (e.key === 'Enter') {\r\n    sendAPIcall();\r\n  }\r\n})\r\n\r\n// of if user clicks the search button, will also trigger API call\r\nsearchButton.addEventListener('click', () => sendAPIcall());\r\n\r\n// functionality for API call - sets GraphQL query, variables and header options, sends API call to GitHub, and passes the result to a function that will put it in the browser\r\nfunction sendAPIcall() {\r\n  console.info('Prepping API call...')\r\n\r\n  // gql query\r\n  const gqlQuery = `query($query: String!) {\r\n  search(query: $query, type: USER, first: 100) {\r\n    userCount\r\n    pageInfo {\r\n      startCursor\r\n      endCursor\r\n      hasNextPage\r\n      hasPreviousPage\r\n    }\r\n    edges {\r\n      cursor\r\n      node {\r\n        ... on User {\r\n          name\r\n          login\r\n          bio\r\n          url\r\n          avatarUrl\r\n          isHireable\r\n          followers {\r\n            totalCount\r\n          }\r\n          starredRepositories {\r\n            totalCount\r\n          }\r\n          pinnedItems(first: 6) {\r\n            edges {\r\n              node {\r\n                ... on Repository {\r\n                  name\r\n                  description\r\n                  url\r\n                  stargazers {\r\n                    totalCount\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\n  const variables = {\r\n    query: searchText.value\r\n  }\r\n\r\n  const endpoint = 'https://api.github.com/graphql';\r\n\r\n  const options = {\r\n    method: \"POST\",\r\n    headers: { \r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": `Bearer ${process.env.TOKEN}`\r\n    },\r\n    body: JSON.stringify({ query: gqlQuery, variables })\r\n  };\r\n\r\n  fetch(endpoint, options)\r\n  .then(res => res.json())\r\n  .then(userData => {\r\n    const results = userData.data.search.edges;\r\n    return createCards(results);\r\n  })\r\n  .catch(err => console.error(err));\r\n}\r\n\r\n// for each user the search found, will create a display card for them and send it to the results div\r\nfunction createCards(users) {\r\n  users.forEach(person => {\r\n    const displayCard = `\r\n      <div class=\"result-item\">\r\n        <img src=${person.node.avatarUrl} class=\"result-bio\">\r\n        <div class=\"result-names\">\r\n          <a href=${person.node.url} class=\"display\">${person.node.name}</a>\r\n          <a href=${person.node.url} class=\"username\">${person.node.login}</a>\r\n        </div>\r\n        <div class=\"result-info\">\r\n          <div class=\"tidbits\">  \r\n          <p class=\"hireable\">${person.node.isHireable ? 'For Hire!' : ''}</p>\r\n            <p class=\"followers\">${person.node.followers.totalCount} followers</p>\r\n            <p class=\"starred\">${person.node.starredRepositories.totalCount} starred repos</p>\r\n          </div>\r\n          <p class=\"result-bio\">${person.node.bio}</p>\r\n        </div>\r\n        <div class=\"result-repos\">\r\n          ${person.node.pinnedItems.edges.forEach(repo => {\r\n            detailsCard(repo);\r\n          })}\r\n        </div>\r\n      </div>\r\n    `\r\n\r\n    resultsBlock.appendChild(displayCard);\r\n  })\r\n}\r\n\r\nfunction detailsCard(repo) {\r\n  const items = `<a href=${repo.url} class=\"repo-name\">${repo.name}</a>\r\n              <p class=\"repo-desc\">${repo.description}</p>\r\n              <p class=\"repo-stars\">${repo.stargazers}</p>`\r\n\r\n  return items;\r\n}"]}